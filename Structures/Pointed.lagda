\DeclareUnicodeCharacter{7472}{\ensuremath{7472}}

\section{Pointed Algebras: Nullable Types}

We consider the theory of \emph{pointed algebras} which consist of a type
along with an elected value of that type.\footnote{Note that this definition
is phrased as a ``dependent product''!}

Software engineers encounter such
scenarios all the time in the case of an object-type and a default value of
a ``null'', or undefined, object. In the more explicit setting of pure functional
programming, this concept arises in the form of |Maybe|, or |Option| types.

Some programming languages, such as |C#| for example, provide a |default| keyword to access a default value of a given data type.

% edinsert{MA}{Haskell's typeclass analogue of |default|?}
%
% edcomm{MA}{Perhaps discuss ``types as values'' and the subtle issue of how pointed algebras
% are completely different than classes in an imperative setting. }

%{{{ Imports
\begin{code}
{-# OPTIONS --allow-unsolved-metas #-}

module Structures.Pointed where

open import Level renaming (suc to lsuc; zero to lzero)
open import Function using (id ; _‚àò_)
open import Data.Maybe using (Maybe; just; nothing; maybe; maybe‚Ä≤)

open import Helpers.Categorical
open import Helpers.Forget
open import Helpers.EqualityCombinators
\end{code}
%}}}

%{{{ Pointed ; Hom

\subsection{Definition}

As mentioned before, a |Pointed| algebra is a type, which we will refer to by |Carrier|,
along with a value, or |point|, of that type.

\begin{code}
record Pointed {a} : Set (lsuc a) where
  constructor MkPointed
  field
    Carrier   :   Set a
    point     :   Carrier

open Pointed
\end{code}

Unsurprisingly, a ``structure preserving operation'' on such structures is a function
between the underlying carriers that takes the source's point to the target's point.

\begin{code}
record Hom {‚Ñì} (X Y : Pointed {‚Ñì}) : Set ‚Ñì where
  constructor MkHom
  field
    mor           :  Carrier X ‚Üí Carrier Y
    preservation  :  mor (point X) ‚â° point Y

open Hom
\end{code}
%}}}

%{{{ PointedAlg ; PointedCat ; Forget
\subsection{Category and Forgetful Functors}

Since there is only one type, or sort, involved in the definition,
we may hazard these structures as ``one sorted algebras'':

\begin{code}
Id : {‚Ñì : Level} {A : Pointed {‚Ñì}} ‚Üí Hom A A
Id = MkHom id ‚â°.refl

oneSortedAlg : ‚àÄ {‚Ñì} ‚Üí OneSortedAlg ‚Ñì
oneSortedAlg = record
   { Alg         =   Pointed
   ; Carrier     =   Carrier
   ; Hom         =   Hom
   ; mor         =   mor
   ; comp        =   Œª F G ‚Üí MkHom (mor F ‚àò mor G)
                             (‚â°.cong (mor F) (preservation G) ‚ü®‚â°‚â°‚ü© preservation F)
   ; comp-is-‚àò   =   ‚âê-refl
   ; Id          =   Id
   ; Id-is-id    =   ‚âê-refl
   }
\end{code}

From which we immediately obtain a category and a forgetful functor.

\begin{code}
Pointeds : (‚Ñì : Level) ‚Üí Category (lsuc ‚Ñì) ‚Ñì ‚Ñì
Pointeds ‚Ñì = oneSortedCategory ‚Ñì oneSortedAlg

Forget : (‚Ñì : Level) ‚Üí Functor (Pointeds ‚Ñì) (Sets ‚Ñì)
Forget ‚Ñì = mkForgetful ‚Ñì oneSortedAlg
\end{code}

The naming |Pointeds| is to be consistent with the category theory library we are using,
which names the category of sets and functions by |Sets|. That is, the category name is
the objects' name suffixed with an ‚Äòs‚Äô.

Of-course, as hinted in the introduction, this structure ---as are many--- is defined in a
dependent fashion and so we have another forgetful functor:

\begin{code}
open import Helpers.DataProperties
open ‚â°

Forget·¥∞ : (‚Ñì : Level) ‚Üí Functor (Pointeds ‚Ñì) (Sets ‚Ñì)
Forget·¥∞ ‚Ñì = record
  { F‚ÇÄ = Œª P ‚Üí Œ£ x ‚à∂ Carrier P  ‚Ä¢ x ‚â° point P
  ; F‚ÇÅ = Œª {P} {Q} F ‚Üí Œª{ (val , val‚â°ptP)
    ‚Üí mor F val , ‚â°.cong (mor F) val‚â°ptP ‚ü®‚â°‚â°‚ü© preservation F }
  ; identity = Œª {P} ‚Üí Œª{ {val , val‚â°ptP} ‚Üí cong (val ,_) let open ‚â°-Reasoning in
      begin
         trans (‚â°.cong id val‚â°ptP) refl
      ‚â°‚ü® trans-refl ≥ _ ‚ü©
         cong id val‚â°ptP
      ‚â°‚ü® cong-id _ ‚ü©
         val‚â°ptP
      ‚àé }
  ; homomorphism = Œª {P} {Q} {R} {F} {G} ‚Üí Œª{ {val , val‚â°ptP} ‚Üí cong (_ ,_) let open ‚â°-Reasoning in
       begin
             cong (mor G ‚àò mor F) val‚â°ptP
        ‚ü®‚â°‚â°‚ü© cong (mor G) (preservation F)
        ‚ü®‚â°‚â°‚ü© preservation G

      ‚â°‚ü® sym (trans-assoc (cong (mor G ‚àò mor F) val‚â°ptP)) ‚ü©

             (cong (mor G ‚àò mor F) val‚â°ptP
        ‚ü®‚â°‚â°‚ü© cong (mor G) (preservation F))
        ‚ü®‚â°‚â°‚ü© preservation G

      ‚â°‚ü® cong (_‚ü®‚â°‚â°‚ü© preservation G)
         (begin
             cong (mor G ‚àò mor F) val‚â°ptP ‚ü®‚â°‚â°‚ü© cong (mor G) (preservation F)

             ‚â°‚ü® cong (_‚ü®‚â°‚â°‚ü© cong (mor G) (preservation F)) (cong-‚àò val‚â°ptP) ‚ü©

             cong (mor G) (cong (mor F) val‚â°ptP) ‚ü®‚â°‚â°‚ü© cong (mor G) (preservation F)

             ‚â°‚ü® cong-over-trans (preservation F) ‚ü©

             cong (mor G) (cong (mor F) val‚â°ptP ‚ü®‚â°‚â°‚ü© preservation F)
             ‚àé)
       ‚ü©

      cong (mor G) (cong (mor F) val‚â°ptP ‚ü®‚â°‚â°‚ü© preservation F)
      ‚ü®‚â°‚â°‚ü© preservation G
      ‚àé}
  ; F-resp-‚â° = Œª {P} {Q} {F} {G} F‚âàG ‚Üí Œª{ {val , val‚â°ptP} ‚Üí cong‚ÇÇ _,_ (F‚âàG val)
    {! let open ‚â°-Reasoning in begin
        ((cong (mor F) val‚â°ptP) ‚ü®‚â°‚â°‚ü© preservation F)
      ‚â°‚ü® {!!} ‚ü©
        ((cong (mor G) val‚â°ptP) ‚ü®‚â°‚â°‚ü© preservation G)
      ‚àé !} }
  } -- MA: Stuck :'(
\end{code}

That is, we ``only remember the point''.

Since this functor is rather proof-heavy, we will not explore
any adjoint for it.

%}}}

%{{{ Free ; MaybeLeft ; NoRight
\subsection{A Free Construction}

As discussed earlier, the prime example of pointed algebras are the optional types,
and this claim can be realised as a functor:
\begin{code}
Free : (‚Ñì : Level) ‚Üí Functor (Sets ‚Ñì) (Pointeds ‚Ñì)
Free ‚Ñì = record
  { F‚ÇÄ             =   Œª A ‚Üí MkPointed (Maybe A) nothing
  ; F‚ÇÅ             =   Œª f ‚Üí MkHom (maybe (just ‚àò f) nothing) ‚â°.refl
  ; identity       =   maybe ‚âê-refl ‚â°.refl
  ; homomorphism   =   maybe ‚âê-refl ‚â°.refl
  ; F-resp-‚â°      =   Œª F‚â°G ‚Üí maybe (‚àò-resp-‚âê (‚âê-refl {x = just}) (Œª x ‚Üí F‚â°G {x})) ‚â°.refl
  }
\end{code}

Which is indeed deserving of its name:

\begin{code}
MaybeLeft : (‚Ñì : Level) ‚Üí Adjunction (Free ‚Ñì) (Forget ‚Ñì)
MaybeLeft ‚Ñì = record
  { unit        =   record { Œ∑ = Œª _ ‚Üí just ; commute = Œª _ ‚Üí ‚â°.refl }
  ; counit      =   record
    { Œ∑         =    Œª X ‚Üí MkHom (maybe id (point X)) ‚â°.refl
    ; commute   =    maybe ‚âê-refl ‚àò ‚â°.sym ‚àò preservation
    }
  ; zig         =    maybe ‚âê-refl ‚â°.refl
  ; zag         =    ‚â°.refl
  }
\end{code}

% edcomm{MA}{Develop |Maybe| explicitly so we can ``see'' how the utility |maybe| ``pops up naturally''.}

While there is a ``least'' pointed object for any given set, there is, in-general, no ``largest'' pointed object
corresponding to any given set. That is, there is no co-free functor.

\begin{code}
NoRight : {‚Ñì : Level} ‚Üí (CoFree : Functor (Sets ‚Ñì) (Pointeds ‚Ñì)) ‚Üí Adjunction (Forget ‚Ñì) CoFree ‚Üí ‚ä•
NoRight {‚Ñì} (record { F‚ÇÄ = f }) Adjunct = Œ∑ (counit Adjunct) ‚ä• (point (f ‚ä•))
  where open Adjunction
        open NaturalTransformation
\end{code}
%}}}

%{{{ Initial object

A singleton set with its only point determines an initial object in this category.

\begin{code}
open import Structures.OneCat hiding (initial)
initial : {‚Ñì : Level} ‚Üí Initial (Pointeds ‚Ñì)
initial = record
  { ‚ä•         =   MkPointed One ‚ãÜ
  ; !         =   Œª{ {MkPointed X x} ‚Üí MkHom (ùë≤ x) ‚â°.refl }
  ; !-unique  =   Œª{ f ‚ãÜ ‚Üí ‚â°.sym (preservation f) }
  }
\end{code}

%}}}

%{{{ 0-ary adjoint
\begin{code}
module ZeroAryAdjoint where

  Forget-0 : (‚Ñì : Level) ‚Üí Functor (Pointeds ‚Ñì) (OneCat ‚Ñì ‚Ñì ‚Ñì)
  Forget-0 ‚Ñì = MakeForgetfulFunctor Carrier

  -- OneCat can be, itself, viewed as a pointed set; i.e., an object of Pointeds.
  Free-0 : (‚Ñì : Level) ‚Üí Functor (OneCat ‚Ñì ‚Ñì ‚Ñì) (Pointeds ‚Ñì)
  Free-0 ‚Ñì = MakeFreeFunctor (MkPointed One ‚ãÜ)

  Left : (‚Ñì : Level) ‚Üí Adjunction (Free-0 ‚Ñì) (Forget-0 ‚Ñì)
  Left ‚Ñì =  Make-Free‚ä¢Forget {C = Pointeds ‚Ñì} Carrier initial
\end{code}
%}}}

So much for structures with an elected element.

% Quick Folding Instructions:
% C-c C-s :: show/unfold region
% C-c C-h :: hide/fold region
% C-c C-w :: whole file fold
% C-c C-o :: whole file unfold
%
% Local Variables:
% folded-file: t
% eval: (fold-set-marks "%{{{ " "%}}}")
% eval: (fold-whole-buffer)
% fold-internal-margins: 0
% end:
