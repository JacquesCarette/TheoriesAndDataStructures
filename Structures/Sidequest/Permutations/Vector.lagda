\section{Structures.Sidequest.Permutations}

‚Äº THIS HAS A POSTULATE ‚Äº

Documenting the relationship between |Vec| and |Permutation|.

The following is inspired by copumkin & vmchale's libraries.

%{{{ Imports
\begin{code}
module Structures.Sidequest.Permutations.Vector where

open import Level using (Level)
open import Function using (_$_)
open import DataProperties hiding (‚ü®_,_‚ü©)
open import EqualityCombinators

open import Function using (_$_) renaming (id to Id‚ÇÄ ; _‚àò_ to _‚àò‚ÇÄ_)

open import Data.Vec
open import Data.Vec.Properties using (lookup‚àòtabulate; lookup-allFin)
open import Data.Nat hiding (fold ; _*_)
open import Data.Fin hiding (_+_ ; fold ; _‚â§_)

open import Data.Sum using () renaming (map to _‚äé‚ÇÅ_; [_,_] to either)

open import Structures.Sidequest.Permutations.Basic
\end{code}
%}}}

Note that the most straightforward implementation of |toVector‚Ä≤| gives us
things "backwards": Elements of |Fin n| of length |m|.
Further, this is completely different than |seeP|, as |toVector‚Ä≤| really gives a
way to see the action on |allFin|.

\begin{code}
toVector‚Ä≤ : {n m : ‚Ñï} ‚Üí Permutation n m ‚Üí Vec (Fin n) m
toVector‚Ä≤ p = p ‚óà allFin _
\end{code}

%{{{ Efforts for deletion

Attempt to tighten the bound on a Fin; i.e., |Sidequest.idris|.
\begin{code}
tighten : {m : ‚Ñï} ‚Üí Fin (suc m) ‚Üí  Fin (suc m)  ‚äé  Fin m
tighten {zero} zero = inj‚ÇÅ zero
tighten {zero} (suc ())
tighten {suc m} zero = inj‚ÇÇ zero
tighten {suc m} (suc i) = (suc ‚äé‚ÇÅ suc) (tighten i)

-- spec : {m : ‚Ñï} {i : Fin (suc m)} (i<m : to‚Ñï i Data.Nat.< m) ‚Üí tighten i ‚â° inj‚ÇÇ (from‚Ñï‚â§ i<m)

sub1 : {m : ‚Ñï} ‚Üí Fin (suc (suc m)) ‚Üí Fin (suc m)
sub1 zero    = zero
sub1 (suc i) = i

force : {m n : ‚Ñï} ‚Üí let ùìÉ = suc n in Vec (Fin (suc ùìÉ)) m ‚Üí Vec (Fin ùìÉ) m
force = map (Œª it ‚Üí either sub1 Id‚ÇÄ (tighten it))

-- ‚Äº need a relationship between q and i.
postulate
  lemma-0 : {m : ‚Ñï} {q i : Fin (suc m)} {qs : Permutation m m}
         ‚Üí let it = removeElem (suc q) (allFin (suc (suc m)))  ‚Äº  i
            in
                either {C = Œª _ ‚Üí Fin (suc m)} sub1 Id‚ÇÄ (tighten it)
            ‚â°  i
            {-
lemma-0 {m} {q} {zero} {qs} = ‚â°.refl
lemma-0 {zero} {q} {suc ()} {qs}
lemma-0 {suc m} {zero} {suc i} {p ‚à∑ qs} = {!!}
lemma-0 {suc m} {suc q} {suc i} {qs} = {!!}
-}
\end{code}
%}}}

%{{{ fromVector‚Ä≤ ; fromVector
\begin{code}
-- \edcomm{WK}{Right argument sequence for |Permutation|?}
fromVector‚Ä≤ : {m n : ‚Ñï} ‚Üí m ‚â° n ‚Üí Vec (Fin n) m ‚Üí Permutation n m
fromVector‚Ä≤ {0} ‚â°.refl []                 = []
fromVector‚Ä≤ {suc zero} ‚â°.refl (zero ‚à∑ []) = zero ‚à∑ []
fromVector‚Ä≤ {suc zero} ‚â°.refl (suc () ‚à∑ [])
fromVector‚Ä≤ {suc (suc n)} ‚â°.refl (f ‚à∑ fs) = f ‚à∑ fromVector‚Ä≤ ‚â°.refl (force fs)

fromVector : {n : ‚Ñï} ‚Üí Vec (Fin n) n ‚Üí Permutation n n
fromVector {0} []                 = []
fromVector {suc zero} (zero ‚à∑ []) = zero ‚à∑ []
fromVector {suc zero} (suc () ‚à∑ [])
fromVector {suc (suc n)} (f ‚à∑ fs) = f ‚à∑ fromVector (force fs)
\end{code}
%}}}

%{{{ seePerm ; toVector

Notice that |Permutation n m| is similar to, but distinct from, |Vec (Fin n) m|
and |Vec (Fin m) n|.  We can use the following to directly _visualize_ a permutation
in a nicer way than using |Fin|s.

\begin{code}
seePerm‚Ä≤ : {n m : ‚Ñï} ‚Üí Permutation n m ‚Üí Vec ‚Ñï m
seePerm‚Ä≤ p = Data.Vec.map to‚Ñï $ toVector‚Ä≤ p

-- We have a different application now...

toVector : {n m : ‚Ñï} ‚Üí Permutation n m ‚Üí Vec (Fin m) n
toVector p = p ‚óá allFin _
\end{code}

%}}}

%{{{ seePerm ; seeHelper ; seeP

\begin{code}
seePerm : {n m : ‚Ñï} ‚Üí Permutation n m ‚Üí Vec ‚Ñï n
seePerm p = Data.Vec.map to‚Ñï $ toVector p

seeHelper :  {n : ‚Ñï} (let ùìÉ = suc n) (ps : Permutation ùìÉ ùìÉ)
  ‚Üí Vec ‚Ñï ùìÉ √ó  Vec ‚Ñï ùìÉ
seeHelper ps =  Data.Vec.map to‚Ñï (toVector ps)
  , Data.Vec.map to‚Ñï (force (ps ‚óá (suc zero ‚à∑ tabulate (Œª x ‚Üí suc (suc x)))))

  -- We can use the following to directly _visualize_ a permutation
  -- in a nicer way that using |Fin|s.
seeP : {n m : ‚Ñï} ‚Üí Permutation n m ‚Üí Vec ‚Ñï n
seeP [] = []
seeP (p ‚à∑ ps) = (to‚Ñï p) ‚à∑ seeP ps
\end{code}
%}}}
  
%{{{ allFin specification ;; THIS NEEDS TO BE ELSEWHERE!

\begin{code}
-- |+-suc : ‚àÄ m n ‚Üí m + suc n ‚â° suc (m + n)|
open import Data.Nat.Properties.Simple using (+-suc)

fsucÃÇ : (m {n} : ‚Ñï) ‚Üí Fin n ‚Üí Fin (m + n)
fsucÃÇ zero i = i
fsucÃÇ (suc m) {n} i = suc (fsucÃÇ m i) -- ‚â°.subst Fin (+-suc m n) (fsucÃÇ m (suc i))

-- |{m n : ‚Ñï} {i : Fin n}‚Üí (m ‚à∑ tabulate (Œª x ‚Üí m + x)) ‚Äº i ‚â° m + i|
hmm : {m n : ‚Ñï} {i : Fin n} ‚Üí (tabulate (fsucÃÇ m) ‚Äº i) ‚â° fsucÃÇ m i
hmm {m} {n} {i} =  lookup‚àòtabulate (fsucÃÇ m) i

allFin-spec : {n : ‚Ñï} {i : Fin (suc (suc n))} ‚Üí allFin _ ‚Äº i  ‚â°  i
allFin-spec {n} {i} = lookup-allFin i
\end{code}

%}}}

%{{{ from-to proof

\begin{code}
_‚àã_ : {a : Level} (A : Set a) (x : A) ‚Üí A
A ‚àã x = x

fromVector-cong : {n : ‚Ñï} {vs ws : Vec (Fin n) n} ‚Üí vs ‚â° ws ‚Üí fromVector vs ‚â° fromVector ws
fromVector-cong = ‚â°.cong fromVector

postulate
  helper : {n : ‚Ñï} (let ùìÉ = suc n) {ps : Permutation ùìÉ ùìÉ}
       ‚Üí    force (ps ‚óá (suc zero ‚à∑ tabulate (Œª x ‚Üí suc (suc x))))
          ‚â° toVector ps

from-to : {n : ‚Ñï} {ps : Permutation n n} ‚Üí fromVector (toVector ps) ‚â° ps
from-to {0} {[]} = ‚â°.refl
from-to {suc zero} {zero ‚à∑ []} = ‚â°.refl
from-to {suc zero} {suc () ‚à∑ []}
-- case on |p| since |removeElem| is defined that way.
from-to {suc (suc n)} {zero ‚à∑ ps} = ‚â°.cong‚ÇÇ _‚à∑_ ‚â°.refl (fromVector-cong helper ‚ü®‚â°‚â°‚ü© from-to)
from-to {suc (suc n)} {suc p ‚à∑ ps} = ‚â°.cong‚ÇÇ _‚à∑_ allFin-spec
     (fromVector-cong (goal p ps) ‚ü®‚â°‚â°‚ü© from-to)
  where

    postulate
      goal : {m : ‚Ñï} (let ùìÇ = suc m) (q : Fin ùìÇ) (qs : Permutation ùìÇ ùìÇ)
         ‚Üí force (qs ‚óá (zero ‚à∑ removeElem q (suc zero ‚à∑ tabulate (Œª x ‚Üí suc (suc x)))))
         ‚â° toVector qs
    -- goal {m} q (p‚ÇÅ ‚à∑ qs) = ‚â°.cong‚ÇÇ _‚à∑_ (lemma-0 {m} {q} {p‚ÇÅ} {qs} ‚ü®‚â°‚â°‚ü© ‚â°.sym allFin-spec) {!!} --
\end{code}

%}}}

% Quick Folding Instructions:
% C-c C-s :: show/unfold region
% C-c C-h :: hide/fold region
% C-c C-w :: whole file fold
% C-c C-o :: whole file unfold
%
% Local Variables:
% folded-file: t
% eval: (fold-set-marks "%{{{ " "%}}}")
% eval: (fold-whole-buffer)
% fold-internal-margins: 0
% end:
